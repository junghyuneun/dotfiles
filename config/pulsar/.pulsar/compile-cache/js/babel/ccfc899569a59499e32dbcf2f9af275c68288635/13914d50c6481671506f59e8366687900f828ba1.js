'use babel';

var _tinycolor = _interopRequireDefault(require("tinycolor2"));
var _writeConfigFile = _interopRequireDefault(require("../helper/write-config-file"));
var _toggleClassName = _interopRequireDefault(require("../helper/toggle-class-name"));
var _toCamelCase = _interopRequireDefault(require("../helper/to-camel-case"));
var _colorTemplates = _interopRequireDefault(require("../color-templates.json"));
var _buildColorSettings = _interopRequireDefault(require("./build-color-settings"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
atom.config.onDidChange('atom-material-ui.colors.abaseColor', ({
  newValue
}) => {
  if (atom.config.get('atom-material-ui.colors.genAccent')) {
    const accentColor = (0, _tinycolor.default)(newValue.toHexString()).complement().saturate(20).lighten(5);
    return atom.config.set('atom-material-ui.colors.accentColor', accentColor.toRgbString());
  }
  return (0, _writeConfigFile.default)((0, _buildColorSettings.default)(newValue, atom.config.get('atom-material-ui.colors.accentColor')), true);
});
atom.config.onDidChange('atom-material-ui.colors.predefinedColor', value => {
  const newValue = (0, _toCamelCase.default)(value.newValue);
  atom.config.set('atom-material-ui.colors.abaseColor', _colorTemplates.default[newValue].base);
  atom.config.set('atom-material-ui.colors.accentColor', _colorTemplates.default[newValue].accent);
});
atom.config.onDidChange('atom-material-ui.colors.accentColor', ({
  newValue
}) => (0, _writeConfigFile.default)((0, _buildColorSettings.default)(atom.config.get('atom-material-ui.colors.abaseColor'), newValue), true));
atom.config.observe('atom-material-ui.colors.paintCursor', value => (0, _toggleClassName.default)('amu-paint-cursor', value));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhdG9tIiwiY29uZmlnIiwib25EaWRDaGFuZ2UiLCJuZXdWYWx1ZSIsImdldCIsImFjY2VudENvbG9yIiwidGlueWNvbG9yIiwidG9IZXhTdHJpbmciLCJjb21wbGVtZW50Iiwic2F0dXJhdGUiLCJsaWdodGVuIiwic2V0IiwidG9SZ2JTdHJpbmciLCJ3cml0ZUNvbmZpZ0ZpbGUiLCJidWlsZENvbG9yU2V0dGluZ3MiLCJ2YWx1ZSIsInRvQ2FtZWxDYXNlIiwiY29sb3JUZW1wbGF0ZXMiLCJiYXNlIiwiYWNjZW50Iiwib2JzZXJ2ZSIsInRvZ2dsZUNsYXNzTmFtZSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgdGlueWNvbG9yIGZyb20gJ3Rpbnljb2xvcjInO1xuaW1wb3J0IHdyaXRlQ29uZmlnRmlsZSBmcm9tICcuLi9oZWxwZXIvd3JpdGUtY29uZmlnLWZpbGUnO1xuaW1wb3J0IHRvZ2dsZUNsYXNzTmFtZSBmcm9tICcuLi9oZWxwZXIvdG9nZ2xlLWNsYXNzLW5hbWUnO1xuaW1wb3J0IHRvQ2FtZWxDYXNlIGZyb20gJy4uL2hlbHBlci90by1jYW1lbC1jYXNlJztcbmltcG9ydCBjb2xvclRlbXBsYXRlcyBmcm9tICcuLi9jb2xvci10ZW1wbGF0ZXMuanNvbic7XG5pbXBvcnQgYnVpbGRDb2xvclNldHRpbmdzIGZyb20gJy4vYnVpbGQtY29sb3Itc2V0dGluZ3MnO1xuXG5hdG9tLmNvbmZpZy5vbkRpZENoYW5nZSgnYXRvbS1tYXRlcmlhbC11aS5jb2xvcnMuYWJhc2VDb2xvcicsICh7IG5ld1ZhbHVlIH0pID0+IHtcbiAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdhdG9tLW1hdGVyaWFsLXVpLmNvbG9ycy5nZW5BY2NlbnQnKSkge1xuICAgICAgICBjb25zdCBhY2NlbnRDb2xvciA9IHRpbnljb2xvcihuZXdWYWx1ZS50b0hleFN0cmluZygpKVxuICAgICAgICAgICAgLmNvbXBsZW1lbnQoKVxuICAgICAgICAgICAgLnNhdHVyYXRlKDIwKVxuICAgICAgICAgICAgLmxpZ2h0ZW4oNSk7XG5cbiAgICAgICAgcmV0dXJuIGF0b20uY29uZmlnLnNldCgnYXRvbS1tYXRlcmlhbC11aS5jb2xvcnMuYWNjZW50Q29sb3InLCBhY2NlbnRDb2xvci50b1JnYlN0cmluZygpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JpdGVDb25maWdGaWxlKFxuICAgICAgICBidWlsZENvbG9yU2V0dGluZ3MoXG4gICAgICAgICAgICBuZXdWYWx1ZSwgYXRvbS5jb25maWcuZ2V0KCdhdG9tLW1hdGVyaWFsLXVpLmNvbG9ycy5hY2NlbnRDb2xvcicpLFxuICAgICAgICApLFxuICAgICAgICB0cnVlLFxuICAgICk7XG59KTtcblxuYXRvbS5jb25maWcub25EaWRDaGFuZ2UoJ2F0b20tbWF0ZXJpYWwtdWkuY29sb3JzLnByZWRlZmluZWRDb2xvcicsICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdG9DYW1lbENhc2UodmFsdWUubmV3VmFsdWUpO1xuXG4gICAgYXRvbS5jb25maWcuc2V0KCdhdG9tLW1hdGVyaWFsLXVpLmNvbG9ycy5hYmFzZUNvbG9yJywgY29sb3JUZW1wbGF0ZXNbbmV3VmFsdWVdLmJhc2UpO1xuICAgIGF0b20uY29uZmlnLnNldCgnYXRvbS1tYXRlcmlhbC11aS5jb2xvcnMuYWNjZW50Q29sb3InLCBjb2xvclRlbXBsYXRlc1tuZXdWYWx1ZV0uYWNjZW50KTtcbn0pO1xuXG5hdG9tLmNvbmZpZy5vbkRpZENoYW5nZSgnYXRvbS1tYXRlcmlhbC11aS5jb2xvcnMuYWNjZW50Q29sb3InLCAoeyBuZXdWYWx1ZSB9KSA9PiAoXG4gICAgd3JpdGVDb25maWdGaWxlKFxuICAgICAgICBidWlsZENvbG9yU2V0dGluZ3MoXG4gICAgICAgICAgICBhdG9tLmNvbmZpZy5nZXQoJ2F0b20tbWF0ZXJpYWwtdWkuY29sb3JzLmFiYXNlQ29sb3InKSwgbmV3VmFsdWUsXG4gICAgICAgICksXG4gICAgICAgIHRydWUsXG4gICAgKVxuKSk7XG5cbmF0b20uY29uZmlnLm9ic2VydmUoJ2F0b20tbWF0ZXJpYWwtdWkuY29sb3JzLnBhaW50Q3Vyc29yJywgdmFsdWUgPT4gdG9nZ2xlQ2xhc3NOYW1lKCdhbXUtcGFpbnQtY3Vyc29yJywgdmFsdWUpKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBd0Q7QUFFeERBLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxXQUFXLENBQUMsb0NBQW9DLEVBQUUsQ0FBQztFQUFFQztBQUFTLENBQUMsS0FBSztFQUM1RSxJQUFJSCxJQUFJLENBQUNDLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLG1DQUFtQyxDQUFDLEVBQUU7SUFDdEQsTUFBTUMsV0FBVyxHQUFHLElBQUFDLGtCQUFTLEVBQUNILFFBQVEsQ0FBQ0ksV0FBVyxFQUFFLENBQUMsQ0FDaERDLFVBQVUsRUFBRSxDQUNaQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQ1pDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFFZixPQUFPVixJQUFJLENBQUNDLE1BQU0sQ0FBQ1UsR0FBRyxDQUFDLHFDQUFxQyxFQUFFTixXQUFXLENBQUNPLFdBQVcsRUFBRSxDQUFDO0VBQzVGO0VBRUEsT0FBTyxJQUFBQyx3QkFBZSxFQUNsQixJQUFBQywyQkFBa0IsRUFDZFgsUUFBUSxFQUFFSCxJQUFJLENBQUNDLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQ25FLEVBQ0QsSUFBSSxDQUNQO0FBQ0wsQ0FBQyxDQUFDO0FBRUZKLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxXQUFXLENBQUMseUNBQXlDLEVBQUdhLEtBQUssSUFBSztFQUMxRSxNQUFNWixRQUFRLEdBQUcsSUFBQWEsb0JBQVcsRUFBQ0QsS0FBSyxDQUFDWixRQUFRLENBQUM7RUFFNUNILElBQUksQ0FBQ0MsTUFBTSxDQUFDVSxHQUFHLENBQUMsb0NBQW9DLEVBQUVNLHVCQUFjLENBQUNkLFFBQVEsQ0FBQyxDQUFDZSxJQUFJLENBQUM7RUFDcEZsQixJQUFJLENBQUNDLE1BQU0sQ0FBQ1UsR0FBRyxDQUFDLHFDQUFxQyxFQUFFTSx1QkFBYyxDQUFDZCxRQUFRLENBQUMsQ0FBQ2dCLE1BQU0sQ0FBQztBQUMzRixDQUFDLENBQUM7QUFFRm5CLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxXQUFXLENBQUMscUNBQXFDLEVBQUUsQ0FBQztFQUFFQztBQUFTLENBQUMsS0FDeEUsSUFBQVUsd0JBQWUsRUFDWCxJQUFBQywyQkFBa0IsRUFDZGQsSUFBSSxDQUFDQyxNQUFNLENBQUNHLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxFQUFFRCxRQUFRLENBQ2xFLEVBQ0QsSUFBSSxDQUVYLENBQUM7QUFFRkgsSUFBSSxDQUFDQyxNQUFNLENBQUNtQixPQUFPLENBQUMscUNBQXFDLEVBQUVMLEtBQUssSUFBSSxJQUFBTSx3QkFBZSxFQUFDLGtCQUFrQixFQUFFTixLQUFLLENBQUMsQ0FBQyJ9