'use babel';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activate = void 0;
Object.defineProperty(exports, "config", {
  enumerable: true,
  get: function () {
    return _config.default;
  }
});
exports.write = exports.getStatusColors = exports.deactivate = void 0;
var _path = require("path");
var _postcssHexrgba = _interopRequireDefault(require("postcss-hexrgba"));
var _postcssMixins = _interopRequireDefault(require("postcss-mixins"));
var _mixins = _interopRequireDefault(require("./mixins"));
var _postcssNested = _interopRequireDefault(require("postcss-nested"));
var _postcss = _interopRequireDefault(require("postcss"));
var _config = _interopRequireDefault(require("./config"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const {
  CompositeDisposable
} = require('atom'); // eslint-disable-line
const disposables = new CompositeDisposable();

/**
 * Retrieves the current theme status colors from a dummy less file setup
 * by this plugin. Colors are needed for Muted setting along with the Git
 * status colors.
 *
 * @returns {string[]} 4 color values from current UI theme, hex or rgba. If the
 * stylesheet isn't found for some reason, an empty array is returned.
 */
const getStatusColors = () => {
  const styles = atom.styles.styleElementsBySourcePath;
  const style = Object.keys(styles).filter(path => /\/flexicons\/.+\/variables\.less$/.test(path)).map(key => styles[key].innerHTML).pop();
  return style ? style.split('\n').filter(line => /\-\-/.test(line)).map(line => line.split(':').slice(1).pop().slice(1, -1)) : [];
};

/**
 * This is the meat of the plugin. It takes the input CSS file, along with the
 * plugin settings defined in Atom, and runs them through PostCSS. It leverages
 * a few PostCSS plugins and outputs to a less file that is loaded up to apply
 * the icon styles.
 *
 * @param {File} inputFile - An Atom File class that contains the mixins for
 * all of the icons.
 *
 * @param {File} outputFile - An Atom File class where the resulting CSS from
 * PostCSS is written to.
 *
 * @param {Function} [callbackFn] - An optional callback function to be called
 * if the transform completes successfully.
 */
exports.getStatusColors = getStatusColors;
const write = (inputFile, outputFile, callbackFn) => () => (0, _postcss.default)([(0, _postcssMixins.default)((0, _mixins.default)(getStatusColors())), (0, _postcssNested.default)(), (0, _postcssHexrgba.default)()]).process(inputFile.readSync(), {
  from: inputFile.path
}).then(result => {
  if (outputFile.readSync() === result.css) {
    throw new Error('Result CSS matches output file.');
  }
  outputFile.writeSync(result.css);
}).catch(() => {}).then(() => callbackFn && callbackFn());
exports.write = write;
/**
 * Used by Atom for when the plugin is enabled or Atom is starting/reloading.
 * This function will setup instances of the input/output files. Defines the
 * function to reload the package when settings change. Sets up listeners for
 * when settings change and the initial load of Atom is complete.
 */
const activate = () => {
  const {
    File
  } = require('atom'); // eslint-disable-line
  const styles = (0, _path.join)(__dirname, '..', 'styles');
  const inputFile = new File((0, _path.join)(__dirname, 'css', 'index.css'));
  const outputFile = new File((0, _path.join)(styles, 'flexicons.css'));
  const reload = () => atom.packages.getLoadedPackage('flexicons').reloadStylesheets();
  const writeAndReload = () => write(inputFile, outputFile, reload);
  disposables.add(atom.config.onDidChange('flexicons', writeAndReload()));

  // Always generate file on package activation.
  writeAndReload()();
};

/**
 * Used by Atom for when the plugin is disabled or Atom is being closed. This
 * will properly dispose of the listener functions setup in the `activate`
 * method.
 */
exports.activate = activate;
const deactivate = () => disposables.dispose();
exports.deactivate = deactivate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,